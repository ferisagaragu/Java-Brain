{
  "classname":"Json",
  "description":"Clase para un manejo facil de objetos Json",
  "version":"0.0.2",
  "author":[
    {
      "name":"Fernando Garc√≠a Aguirre",
      "contactname":"ferisagaragu@gmail.com"
    }
  ],
  //Datos para documentar
  "variable":[
    {
      "name":"JSON_MODE",
      "type":"int",
      "encapsulation":[
        {"type":"static"},
        {"type":"final"}
      ]
    }
  ],
  "constructor":[
    {
      "name":"Json",
      "parameter":[{"type":"Object","name":"json"}],
      "description":"Se construye con un objeto que contenga un String con un Json valido"
    }
  ],
  "method":
  [
    {
      "name":"getString",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en String"
    },{
      "name":"getInteger",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en Integer"
    },{
      "name":"getFloat",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en Float"
    },{
      "name":"getBoolean",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en Boolean"
    },{
      "name":"getCharacter",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en Character"
    },{
      "name":"getDouble",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en Boolean"
    },{
      "name":"getObject",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en Object"
    },{
      "name":"getJSON",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en JSON"
    },{
      "name":"getJSONArray",
      "parameter":[{"type":"Object","name":"key"}],
      "description":"Trae un objeto del Json convertido en JSONArray"
    }

  ]
}


public Json getJSONArray(Object key, int index){
JSONArray array = null;

try{array = (JSONArray) parser.parse(obj.get(key).toString());}catch (Exception e){}

return new Json(array.get(index));
}

public Json getJSONArray(int index){
return new Json(array.get(index));
}

public Json getJSONArray(Object key){
JSONArray array = null;
try{array = (JSONArray) parser.parse(obj.get(key).toString());}catch (Exception e){}
return new Json(array);
}

public Object[] getArray(Object key){
Object[] dat = null;
if(getString(key).charAt(0) == '['){
String dato = getString(key).replace("[","").replace("]","");
dat = dato.split(",");
for (int i = 0; i < dat.length; i++) {
if(dat[i].toString().equals("\"\"")){
dat[i] = "";
}else {
dat[i] = dat[i].toString().replace("\"","");
}
}
}
return dat;
}

public ArrayList<Object> getList(Object key){
ArrayList<Object> list = new ArrayList<>();

for (Object o:getArray(key)) {
list.add(o);
}
return list;
}

public Timestamp getTimestamp(Object key){
return Timestamp.valueOf(obj.get(key).toString());
}
